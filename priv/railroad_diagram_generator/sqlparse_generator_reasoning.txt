%% -----------------------------------------------------------------------------
%% -----------------------------------------------------------------------------
%%
%% sqlparse_generator_reasoning.txt: SQL - reasons for the sequence of code generation.
%%
%% Copyright (c) 2017 Walter Weinmann.  All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -----------------------------------------------------------------------------

================================================================================
Level 01
--------------------------------------------------------------------------------

APPROXNUM ::= ( ( '.' [0-9]+ ) | ( [0-9]+ '.'? [0-9]* ) ) ( [eE] [+-]? [0-9]+ )? [fFdD]?

==> atom                                == atom = ... literal ...
==> fun_arg                             == fun_arg = ... atom ...
==> literal                             == literal = ... APPROXNUM ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... atom ...

== atom ::= parameter_ref
==        | literal
       | 'USER'

==> fun_arg                             == fun_arg = ... atom ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... atom ...

commit_statement ::= 'COMMIT' ( 'WORK' )?

==> manipulative_statement              == manipulative_statement = ... commit_statement ...

COMPARISON ::= '!=' | '^=' | '<>' | '<' | '>' | '<=' | '>='

HINT ::= '/*' [^\*\/]* '*/'

INTNUM ::= ([0-9]+)

==> atom                                == atom = ... literal ...
==> fun_arg                             == fun_arg = ... atom ...
==> literal                             == literal = ... INTNUM ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... atom ...

JSON ::= ([|] [:{\[#] [^|]+ [|])

==> column_ref                          == column_ref = ... JSON ...
==> fun_arg                             == fun_arg = ... column_ref ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... column_ref ...

NAME ::= [A-Za-z][A-Za-z0-9_@\$~]*

==> column                              == column = ... NAME ...
==> column_ref                          == column_ref = ... NAME ...
==> from_column                         == from_column = ... table_ref ...
==> on_obj_clause                       == on_obj_clause = ... 'ON' 'DIRECTORY' NAME ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... column_ref ...
==> table                               == table = ... NAME ...
==> table_ref                           == table_ref = ... table ...
==> target                              == target = ... NAME ...
==> tbl_type                            == tbl_type = ... NAME ...

outer_join_type ::= ( 'FULL' ( 'OUTER' )? )
                  | ( 'LEFT' ( 'OUTER' )? )
                  | ( 'RIGHT' ( 'OUTER' )? )

PARAMETER ::= ':' [A-Za-z0-9_\.]+

==> from_column                         == from_column = ... table_ref ...
==> parameter                           == parameter = PARAMETER
==> table                               == table = parameter
==> table_ref                           == table_ref = ... table ...

rollback_statement ::= 'ROLLBACK' ( 'WORK' )?

==> manipulative_statement              == manipulative_statement = ... rollback_statement ...

STRING ::= ( 'fun' [A-Za-z0-9,_]* [.]* '->' [.]* 'end.' )
         | ( 'fun\s' ['A-Za-z0-9_]+ ':' ['A-Za-z0-9_]+ '/' [0-9]+ '.' )
         | ( "'" [^\']* "''**" )

==> atom                                == atom = ... literal ...
==> column                              == column = ... STRING ...
==> data_type                           == data_type = ... STRING ...
==> from_column                         == from_column = ... table_ref ...
==> fun_arg                             == fun_arg = ... atom ...
==> literal                             == literal = ... STRING ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... atom ...
==> table                               == table = ... STRING ...
==> table_ref                           == table_ref = ... table ...

tbl_scope ::= 'LOCAL'
            | 'CLUSTER'
            | 'SCHEMA'

tbl_type ::= 'SET'
           | 'ORDERED_SET'
           | 'BAG'
==            | NAME

with_grant_option ::= 'WITH' ( 'GRANT' | 'NAME' | 'HIERARCHY' ) 'OPTION'

with_revoke_option ::= ( 'CASCADE' 'CONSTRAINTS' )
                     | 'FORCE'

================================================================================
Level 02
--------------------------------------------------------------------------------

column_commalist ::= column ( ',' column )*

column_ref ::= ( ( ( ( NAME '.' )? NAME '.' )? NAME )? JSON )
             | ( ( ( NAME '.' )? NAME '.' )? NAME )
             | ( ( ( NAME '.' )? NAME '.' )? NAME '(' '+' ')' )
             | ( ( NAME '.' )? NAME '.' '*' )

==> fun_arg                             == fun_arg = ... column_ref ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... column_ref ...

create_role_def ::= 'CREATE' 'ROLE' NAME

==> manipulative_statement              == manipulative_statement = ... create_role_def ...
==> schema_element                      == schema_element = ... create_role_def ...

cursor ::= NAME

drop_role_def ::= 'DROP' 'ROLE' NAME

==> manipulative_statement              == manipulative_statement = ... drop_role_def ...

drop_user_def ::= 'DROP' 'USER' NAME ( 'CASCADE' )?

==> manipulative_statement              == manipulative_statement = ... drop_user_def ...

extra ::= NAME  ';'

grantee ::= 'PUBLIC'
          | ( NAME ( 'IDENTIFIED' 'BY' NAME )? )

identified ::= IDENTIFIED ( ( 'BY' NAME ) | ( EXTERNALLY ( 'AS' NAME ) ) | ( 'GLOBALLY' ( 'AS' NAME )? ) )

==> spec_item                           == spec_item = ... identified ...

index_name ::= ( NAME '.' )? NAME

quota ::= ( 'QUOTA' 'UNLIMITED' 'ON' NAME )
        | ( 'QUOTA' INTNUM ( NAME )? 'ON' NAME )

role_list ::= NAME ( ',' NAME )*

==> proxy_with                          == proxy_with = ... 'WITH' 'ROLE' role_list ...
==> proxy_with                          == proxy_with = ... 'WITH' 'ROLE' 'ALL' 'EXCEPT' role_list ...

sgn_num ::= ( '-' )? INTNUM

system_privilege ::= 'SELECT'
                   | 'UPDATE'
                   | 'DELETE'
                   | 'INSERT'
                   | 'DROP'
                   | ( NAME ( NAME ( NAME ( NAME )? )? )? )

table_name ::= ( ( NAME '.' )? NAME '.' )? NAME

when_action ::= ( 'GOTO' NAME )
              | 'CONTINUE'

================================================================================
Level 03
--------------------------------------------------------------------------------

close_statement ::= 'CLOSE' cursor

==> manipulative_statement              == manipulative_statement = ... close_statement ...

data_type ::= STRING
             | ( NAME ( '(' sgn_num ')' )? )
             | ( NAME '(' sgn_num ',' sgn_num ')' )

open_statement ::= 'OPEN' cursor

==> manipulative_statement              == manipulative_statement = ... open_statement ...

parameter_ref ::= parameter ( ( 'INDICATOR' )? parameter )?

==> atom                                == atom = ... parameter_ref ...
==> fun_arg                             == fun_arg = ... atom ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... atom ...
==> target                              == target = ... parameter_ref ...

== sql ::= procedure_call
==       | schema
==       | cursor_def
==       | manipulative_statement
      | 'WHENEVER' 'NOT' 'FOUND' when_action
      | 'WHENEVER' 'SQLERROR' when_action

system_privilege_list ::= ( system_privilege ( ',' system_privilege )* )
                        | ( 'ALL' ( 'PRIVILEGES' )? )

table ::= ( ( NAME '.' )? NAME ( NAME )? )
        | STRING
        | ( parameter ( NAME )? )

==> from_column                         == from_column = ... table_ref ...
==> join_ref                            == join_ref = ... table ...
==> on_obj_clause                       == on_obj_clause = ... 'ON' table ...
==> on_obj_clause                       == on_obj_clause = ... 'ON' 'JAVA' ( 'SOURCE' | 'RESOURCE' ) table ...
==> table_ref                           == table_ref = ... table ...

truncate_table ::= 'TRUNCATE' 'TABLE' table_name ( ( 'PRESERVE' | 'PURGE' ) 'MATERIALIZED' 'VIEW' 'LOG' )? ( ( 'DROP' | 'REUSE' ) 'STORAGE' )?

==> manipulative_statement              == manipulative_statement = ... truncate_table ...

user_opt ::= ( ( 'DEFAULT' | 'TEMPORARY' ) 'TABLESPACE' NAME )
           | ( quota  ( quota )* )
           | ( 'PROFILE' NAME )

==> spec_item                           == spec_item = ... user_opt ...

user_role ::= 'DEFAULT' 'ROLE' ( ( 'ALL' ( 'EXCEPT' role_list )? ) | NONE | role_list )

==> spec_item                           == spec_item = ... user_role ...

================================================================================
Level 04
--------------------------------------------------------------------------------

create_index_def ::= 'CREATE' ( 'BITMAP' | 'KEYLIST' | 'HASHMAP' | 'UNIQUE' )? 'INDEX' ( index_name )?
                     'ON' table ( '(' ( NAME  JSON? ) ( ',' NAME JSON? )* ')' )?
                     ( 'NORM_WITH' STRING )?  ( 'FILTER_WITH' STRING )?

==> manipulative_statement              == manipulative_statement = ... create_index_def ...
==> schema_element                      == schema_element = ... create_index_def ...

create_user_def ::= 'CREATE' 'USER' NAME identified ( user_opt )*

==> manipulative_statement              == manipulative_statement = ... create_user_def ...
==> schema_element                      == schema_element = ... create_user_def ...

drop_index_def ::= 'DROP' 'INDEX' ( index_name )? 'FROM' table

==> manipulative_statement              == manipulative_statement = ... drop_index_def ...

drop_table_def ::= 'DROP' ( NAME )? 'TABLE' ( 'IF' 'EXISTS' )? ( table ( ',' table )* ) ( 'RESTRICT' | 'CASCADE' )?

==> manipulative_statement              == manipulative_statement = ... drop_table_def ...

proxy_with ::= ( 'WITH' 'NO' 'ROLES' )
             | ( 'WITH' 'ROLE' role_list )
             | ( 'WITH' 'ROLE' 'ALL' 'EXCEPT' role_list )

==> db_user_proxy                       == db_user_proxy = ... proxy_with ...

================================================================================
Level 05
--------------------------------------------------------------------------------

db_user_proxy ::= proxy_with
                | ( ( proxy_with )? 'AUTHENTICATION' 'REQUIRED' )

grant_def ::= 'GRANT' system_privilege_list ( on_obj_clause )? 'TO' grantee ( ',' grantee )* ( with_grant_option )?

==> manipulative_statement              == manipulative_statement = ... grant_def ...

revoke_def ::= 'REVOKE' system_privilege_list ( on_obj_clause )? 'FROM' grantee ( ',' grantee )* ( with_revoke_option )?

==> manipulative_statement              == manipulative_statement = ... revoke_def ...

target_commalist ::= target ( ',' target )*

================================================================================
Level 06
--------------------------------------------------------------------------------

fetch_statement ::= 'FETCH' cursor 'INTO' target_commalist

==> manipulative_statement              == manipulative_statement = ... fetch_statement ...

proxy_clause ::= ( 'GRANT' | 'REVOKE' ) 'CONNECT' 'THROUGH' ( ( 'ENTERPRISE' 'USERS' ) | db_user_proxy )

================================================================================
Level 07
--------------------------------------------------------------------------------

alter_user_def ::= ( 'ALTER' 'USER' NAME ( ',' NAME )* proxy_clause )
                 | ( 'ALTER' 'USER' NAME spec_item ( spec_item )* )
                 | ( 'ALTER' 'USER' NAME NAME NAME )

==> manipulative_statement              == manipulative_statement = ... alter_user_def ...

================================================================================
Level 11
--------------------------------------------------------------------------------

fun_args ::= fun_arg ( ',' fun_arg )*

scalar_exp ::= scalar_sub_exp ( '||' scalar_exp )?

schema ::= 'CREATE' 'SCHEMA' 'AUTHORIZATION' NAME ( schema_element ( schema_element )* )?

==> sql                                 == sql = ... schema ...

sql_list ::= sql ';' ( extra )? ( sql ';' ( extra )? )*

================================================================================
Level 12
--------------------------------------------------------------------------------

between_predicate ::= scalar_exp ( 'NOT' )? 'BETWEEN' scalar_exp 'AND' scalar_exp

==> predicate                           == predicate = ... between_predicate ...
==> search_condition                    == search_condition = ... predicate ...

function_ref ::= ( ( ( NAME '.' )?  NAME '.' )? NAME '(' fun_args ')' )
               | ( 'FUNS' ( '(' ( fun_args | '*' | ( 'DISTINCT' column_ref ) | ( 'ALL' scalar_exp ) ) ')' )? )

==> fun_arg                             == fun_arg = ... function_ref ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... function_ref ...

like_predicate ::= scalar_exp ( 'NOT' )? 'LIKE' scalar_exp ( 'ESCAPE' atom )?

==> predicate                           == predicate = ... like_predicate ...
==> search_condition                    == search_condition = ... predicate ...

ordering_spec ::= scalar_exp ( 'ASC' | 'DESC' )?

scalar_opt_as_exp ::= ( scalar_exp ( ( '=' | COMPARISON ) scalar_exp )? )
                    | ( scalar_exp ( AS )? NAME )

==> select_field                        == select_field = ... comparison_predicate ...
==> selection                           == selection = select_field_commalist

test_for_null ::= scalar_exp 'IS' ( 'NOT' )? 'NULL'

==> predicate                           == predicate = ... test_for_null ...
==> search_condition                    == search_condition = ... predicate ...

================================================================================
Level 13
--------------------------------------------------------------------------------

assignment ::= column '=' scalar_opt_as_exp

case_when_then ::= 'WHEN' search_condition 'THEN' scalar_opt_as_exp

column_ref_commalist ::= ( column_ref | function_ref ) ( ',' ( column_ref | function_ref ) )*

comparison_predicate ::= scalar_opt_as_exp
                       | (         scalar_exp ( '=' | COMPARISON ) 'PRIOR' scalar_exp )
                       | ( 'PRIOR' scalar_exp ( '=' | COMPARISON )         scalar_exp )

==> predicate                           == predicate = ... comparison_predicate ...
==> search_condition                    == search_condition = ... predicate ...

function_ref_list ::= ( function_ref ';' )
                    | ( function_ref ';' function_ref_list )

order_by_clause ::= 'ORDER' 'BY' ordering_spec ( ',' ordering_spec )*

scalar_exp_commalist ::= scalar_opt_as_exp ( ',' scalar_opt_as_exp )*

table_constraint_def ::= ( 'UNIQUE'        '(' column_commalist ')' )
                       | ( 'PRIMARY' 'KEY' '(' column_commalist ')' )
                       | ( 'FOREIGN' 'KEY' '(' column_commalist ')' 'REFERENCES' table ( '(' column_commalist ')' )? )
                       | ( 'CHECK' '(' search_condition ')' )

==> base_table_element                  == base_table_element = ... table_constraint_def ...

================================================================================
Level 14
--------------------------------------------------------------------------------

assignment_commalist ::= assignment ( ',' assignment )*

case_when_then_list ::= case_when_then ( case_when_then )*

create_table_def ::= 'CREATE' ( tbl_scope )? ( tbl_type )? 'TABLE' table '(' ( base_table_element ( ',' base_table_element )* )? ')'

==> manipulative_statement              == manipulative_statement = ... create_table_def ...
==> schema_element                      == schema_element = ... create_table_def ...

procedure_call ::= ( 'DECLARE' 'BEGIN' function_ref_list 'END' )
                 | ( 'DECLARE' 'BEGIN' sql_list          'END' )
                 | (           'BEGIN' function_ref_list 'END' )
                 | (           'BEGIN' sql_list          'END' )
                 | ( 'CALL' function_ref )

==> sql                                 == sql = ... procedure_call ...

query_partition_clause ::= 'PARTITION' 'BY' ( ( '(' scalar_exp_commalist ')' ) | scalar_exp_commalist )

search_condition ::= ( search_condition ( 'AND' | 'OR' ) search_condition )
                   | ( 'NOT' search_condition )
                   | ( '(' search_condition ')' )
                   | predicate

================================================================================
Level 15
--------------------------------------------------------------------------------

case_when_exp ::= ( '(' case_when_exp ')' )
                | ( 'CASE' ( scalar_opt_as_exp )? case_when_then_list ( 'ELSE' scalar_opt_as_exp )? 'END' )

column_def_opt ::= ( 'NOT' 'NULL' ( 'UNIQUE' | 'PRIMARY' 'KEY' )? )
                 | ( 'DEFAULT' ( function_ref | literal | NAME | 'NULL' | 'USER' ) )
                 | ( 'CHECK' '(' search_condition ')' )
                 | ( 'REFERENCES' table ( '(' column_commalist ')' )? )

hierarchical_query_clause ::= ( 'START' 'WITH' search_condition 'CONNECT' 'BY' ( 'NOCYCLE' )? search_condition )
                            | ( 'CONNECT' 'BY' ( 'NOCYCLE' )? search_condition 'START' 'WITH' search_condition )

returning ::= ( 'RETURNING' | 'RETURN' ) selection 'INTO' selection

where_clause ::= 'WHERE' search_condition

================================================================================
Level 16
--------------------------------------------------------------------------------

column_def ::= column data_type ( column_def_opt )*

==> base_table_element                  == base_table_element = ... column_def ...

delete_statement_positioned ::= 'DELETE' 'FROM' table 'WHERE' 'CURRENT' 'OF' cursor ( returning )?

==> manipulative_statement              == manipulative_statement = ... delete_statement ...

delete_statement_searched ::= 'DELETE' 'FROM' table ( where_clause )? ( returning )?

==> manipulative_statement              == manipulative_statement = ... delete_statement ...

select_field ::= ( case_when_exp ( ( 'AS' )? NAME )? )
               | scalar_opt_as_exp
               | '*'

==> select_field_commalist              == select_field_commalist = select_field ...
==> selection                           == selection = select_field_commalist

update_statement_positioned ::= 'UPDATE' table 'SET' assignment_commalist 'WHERE' 'CURRENT' 'OF' cursor ( returning )?

==> manipulative_statement              == manipulative_statement = ... update_statement ...

update_statement_searched ::= 'UPDATE' table 'SET' assignment_commalist ( where_clause )? ( returning )?

==> manipulative_statement              == manipulative_statement = ... update_statement ...

================================================================================
Level 17
--------------------------------------------------------------------------------

select_field_commalist ::= select_field ( ',' select_field )*

==> select                              == select = ... select_field_commalist ...
==> selection                           == selection = select_field_commalist

================================================================================
Level 18
--------------------------------------------------------------------------------

join_on_or_using_clause ::= ( 'ON' search_condition )
                          | ( 'USING' '(' select_field_commalist ')' )

table_exp ::= 'FROM' from_column ( from_column )* ( where_clause )? ( hierarchical_query_clause )? ( 'GROUP' 'BY' column_ref_commalist )? ( 'HAVING' search_condition )? ( order_by_clause )?

================================================================================
Level 19
--------------------------------------------------------------------------------

inner_cross_join ::= ( 'INNER' )? 'JOIN' join_ref join_on_or_using_clause
                   | ( 'CROSS' | ( 'NATURAL' ( 'INNER' )? ) ) 'JOIN' join_ref

==> join                                == join = ... inner_cross_join ...

outer_join ::= ( NATURAL | query_partition_clause | (query_partition_clause NATURAL) )? outer_join_type JOIN join_ref ( query_partition_clause )? ( join_on_or_using_clause )?

==> join                                == join = ... outer_join ...

query_spec ::= 'SELECT' ( HINT )? ( 'ALL' | 'DISTINCT' )? selection ( 'INTO' target_commalist ( 'IN' NAME )? )? table_exp

==> fun_arg                             == fun_arg = ... subquery ...
==> query_exp                           == query_exp = ... query_term ...
==> query_term                          == query_term = ... query_spec ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... subquery ...
==> select_statement                    == select_statement = ... query_term ...
==> subquery                            == subquery = ... query_term ...

================================================================================
Level 20
--------------------------------------------------------------------------------

insert_statement ::= 'INSERT' 'INTO' table ( ( '(' column_commalist ')' )? ( ( 'VALUES' '(' scalar_opt_as_exp ( ',' scalar_opt_as_exp )* ')' ) | query_spec ) ( returning )? )?

==> manipulative_statement              == manipulative_statement = ... insert_statement ...

join_clause ::= table_ref join ( join )*

==> from_column                         == from_column = ... join_clause ...
==> from_column                         == from_column = ... '(' join_clause ')' ...

query_term ::= query_spec
             | ( '(' query_exp ')' )

==> fun_arg                             == fun_arg = ... subquery ...
==> query_exp                           == query_exp = ... query_term ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... subquery ...
==> select_statement                    == select_statement = ... query_term ...
==> subquery                            == subquery = ... query_term ...

view_def ::= ( 'CREATE' 'VIEW' table ( '(' column_commalist ')' )? )
           | ( 'AS' query_spec ( 'WITH' 'CHECK' 'OPTION' )? )

==> manipulative_statement              == manipulative_statement = ... view_def ...
==> schema_element                      == schema_element = ... view_def ...

================================================================================
Level 21
--------------------------------------------------------------------------------

query_exp ::= query_term
            | ( query_exp ( ( 'UNION' ( 'ALL' )? ) | 'INTERSECT' | 'MINUS' ) query_term )

==> fun_arg                             == fun_arg = ... subquery ...
==> scalar_exp                          == scalar_exp = ... scalar_sub_exp ...
==> scalar_sub_exp                      == scalar_sub_exp = ... subquery ...
==> select_statement                    == select_statement = ... query_exp ...
==> subquery                            == subquery = ... query_exp ...

================================================================================
Level 22
--------------------------------------------------------------------------------

all_or_any_predicate ::= scalar_exp ( '=' | COMPARISON ) ( 'ANY' | 'ALL' | 'SOME' ) subquery

==> predicate                           == predicate = ... all_or_any_predicate ...
==> search_condition                    == search_condition = ... predicate ...

cursor_def ::= 'DECLARE' cursor 'CURSOR' 'FOR' query_exp ( order_by_clause )?

==> sql                                 == sql = ... cursor_def ...

existence_test ::= 'EXISTS' subquery

==> predicate                           == predicate = ... existence_test ...
==> search_condition                    == search_condition = ... predicate ...

fun_arg ::= ( '(' fun_arg ')' )
          | function_ref
          | column_ref
          | ( fun_arg ( '+' | '-' | '*' | '/' | 'div' | '||' ) fun_arg )
          | ( ( '+' | '-' ) fun_arg )
          | 'NULL'
          | atom
          | subquery
          | ( fun_arg 'AS' NAME )
          | ( fun_arg ( '=' | COMPARISON ) fun_arg )

in_predicate ::= ( scalar_exp ( 'NOT' )? 'IN' '(' subquery ')' )
               | ( scalar_exp ( 'NOT' )? 'IN' '(' scalar_exp_commalist ')' )
               | ( scalar_exp ( 'NOT' )? 'IN' scalar_exp )

==> predicate                           == predicate = ... in_predicate ...
==> search_condition                    == search_condition = ... predicate ...

join_ref ::= table
           | ( query_term ( NAME )? )

scalar_sub_exp ::= ( scalar_sub_exp ( '+' | '-' | '*' | '/' | 'div' ) scalar_sub_exp )
                 | ( ( '+' | '-' ) scalar_sub_exp )
                 | 'NULL'
                 | atom
                 | subquery
                 | column_ref
                 | function_ref
                 | ( '(' scalar_sub_exp ')' )

table_ref ::= table
            | ( query_term ( NAME )? )

==> from_column                         == from_column = ... table_ref ...

================================================================================
Level 99
--------------------------------------------------------------------------------

base_table_element ::= column_def
                     | table_constraint_def

column ::= NAME
         | STRING

from_column ::= table_ref
                 | ( '(' join_clause ')' )
                 | join_clause

join ::= inner_cross_join
       | outer_join

literal ::= STRING
          | INTNUM
          | APPROXNUM

manipulative_statement ::= close_statement
                         | commit_statement
                         | delete_statement_positioned
                         | delete_statement_searched
                         | fetch_statement
                         | insert_statement
                         | open_statement
                         | rollback_statement
                         | select_statement
                         | update_statement_positioned
                         | update_statement_searched
                         | create_table_def
                         | create_role_def
                         | create_index_def
                         | create_user_def
                         | drop_role_def
                         | drop_table_def
                         | drop_index_def
                         | alter_user_def
                         | drop_user_def
                         | view_def
                         | truncate_table
                         | grant_def
                         | revoke_def

on_obj_clause ::= ( 'ON' table )
                | ( 'ON' 'DIRECTORY' NAME )
                | ( 'ON' 'JAVA' ( 'SOURCE' | 'RESOURCE' ) table )

parameter ::= PARAMETER

predicate ::= comparison_predicate
            | between_predicate
            | like_predicate
            | test_for_null
            | in_predicate
            | all_or_any_predicate
            | existence_test

schema_element ::= create_role_def
                 | create_table_def
                 | create_index_def
                 | create_user_def
                 | view_def

select_statement ::= query_exp

selection ::= select_field_commalist

spec_item ::= identified
            | user_opt
            | user_role

subquery ::= query_exp

target ::= NAME
         | parameter_ref

/* ================================================================================================================== */
